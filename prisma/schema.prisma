// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma Schema for Loan Operating System (LOS)

// Enums
enum RoleType {
  CLERK
  INSPECTOR
  LOAN_OFFICER
  CEO
  LOAN_COMMITTEE
  BOARD
  BANK_ADMIN
  SAAS_ADMIN
  APPLICANT
  USER
}

enum LoanType {
  PERSONAL
  VEHICLE
  HOUSE_CONSTRUCTION
  PLOT_PURCHASE
  MORTGAGE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum VerificationType {
  RESIDENCE
  BUSINESS
  VEHICLE
  PROPERTY
}

enum VerificationStatus {
  PENDING
  COMPLETED
  FAILED
}

model UserProfile {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("auth_id") // Matches auth.users.id
  authId      String    @unique
  firstName   String?
  lastName    String?
  email       String?   @unique
  phoneNumber String?   @unique
  isOnboarded Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  userRoles     UserRoles[]
  applicants    Applicant[]
  verifications Verification[]
  auditLogs     AuditLog[]
}

model UserRoles {
  id     String   @id @default(dbgenerated("gen_random_uuid()"))
  userId String
  role   RoleType
  bankId String?

  user UserProfile @relation(fields: [userId], references: [authId])
  bank Bank?       @relation(fields: [bankId], references: [id])

  assignedAt DateTime  @default(now())
  deletedAt  DateTime?
}

model Applicant {
  id                       String            @id @default(dbgenerated("gen_random_uuid()"))
  userId                   String
  user                     UserProfile       @relation(fields: [userId], references: [id])
  loanApplications         LoanApplication[]
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  deletedAt                DateTime?
  dateOfBirth              DateTime
  addressState             String
  addressCity              String
  addressFull              String
  addressPinCode           String
  aadharNumber             String
  panNumber                String
  aadharVerificationStatus Boolean           @default(false)
  panVerificationStatus    Boolean           @default(false)
  photoUrl                 String
  incomes                  Income[]
  dependents               Dependent[]
  loanObligations          LoanObligation[]
}

model LoanObligation {
  id          String                 @id @default(dbgenerated("gen_random_uuid()"))
  applicantId String
  applicant   Applicant              @relation(fields: [applicantId], references: [id])
  cibilScore  Float?
  totalLoan   Float?
  totalEmi    Float?
  loanDetails LoanObligationDetail[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
}

model LoanObligationDetail {
  id               String         @id @default(dbgenerated("gen_random_uuid()"))
  loanObligationId String
  loanObligation   LoanObligation @relation(fields: [loanObligationId], references: [id])
  outstandingLoan  Float
  emiAmount        Float
  loanDate         DateTime
  loanType         String
  bankName         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
}

model Income {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  applicantId   String
  applicant     Applicant      @relation(fields: [applicantId], references: [id])
  type          String
  incomeDetails IncomeDetail[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
}

model IncomeDetail {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  incomeId           String
  income             Income    @relation(fields: [incomeId], references: [id])
  year               Int
  taxableIncome      Float?
  taxPaid            Float?
  grossIncome        Float?
  rentalIncome       Float?
  incomeFromBusiness Float?
  depreciation       Float?
  grossCashIncome    Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?
}

model Dependent {
  id                        String    @id @default(dbgenerated("gen_random_uuid()"))
  applicantId               String
  applicant                 Applicant @relation(fields: [applicantId], references: [id])
  averageMonthlyExpenditure Float
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  deletedAt                 DateTime?
}

model Bank {
  id               String              @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  subscription     Subscription?
  loanApplications LoanApplication[]
  configurations   BankConfiguration[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  deletedAt        DateTime?
  UserRoles        UserRoles[]
}

model Subscription {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  bankId    String    @unique
  startDate DateTime
  endDate   DateTime?
  status    String
  amount    Float
  deletedAt DateTime?

  bank Bank @relation(fields: [bankId], references: [id])
}

model BankConfiguration {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  bankId         String
  maxLoanAmount  Float
  approvalLimits Json
  interestRates  Json
  loanDurations  Json
  currency       String
  deletedAt      DateTime?

  bank Bank @relation(fields: [bankId], references: [id])
}

model LoanApplication {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  applicantId     String
  bankId          String
  loanType        LoanType
  amountRequested Float
  status          LoanStatus
  documents       Document[]
  verifications   Verification[]
  guarantors      Guarantor[]
  coApplicants    CoApplicant[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  deletedAt       DateTime?

  applicant Applicant @relation(fields: [applicantId], references: [id])
  bank      Bank      @relation(fields: [bankId], references: [id])
}

model Guarantor {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId String
  firstName         String
  lastName          String
  email             String
  addressState      String
  addressCity       String
  addressZipCode    String
  addressLine1      String
  addressLine2      String?
  mobileNumber      String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
}

model CoApplicant {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId String
  firstName         String
  lastName          String
  email             String
  addressState      String
  addressCity       String
  addressZipCode    String
  addressLine1      String
  addressLine2      String?
  mobileNumber      String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deletedAt         DateTime?

  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
}

model Document {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId  String
  documentType       String
  fileUrl            String
  storageType        String
  verificationStatus VerificationStatus @default(PENDING)
  metadata           Json?
  uploadedAt         DateTime           @default(now())
  deletedAt          DateTime?

  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
}

// Core verification model
model Verification {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId String
  type              VerificationType
  status            VerificationStatus
  verificationDate  DateTime           @default(now())
  verificationTime  String // Storing as String like "12:00 PM"
  result            Boolean // Yes/No result field
  remarks           String? // General remarks field
  verifiedById      String?
  verifiedAt        DateTime?
  addressState      String?
  addressCity       String?
  addressZipCode    String?
  addressLine1      String?
  addressLine2      String?
  locationFromMain  String? // "Location from Main Road" field
  photographUrl     String? // URL to the uploaded photograph
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?

  // Relations
  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
  verifiedBy      UserProfile?    @relation(fields: [verifiedById], references: [id])

  // Type-specific extensions
  residenceVerification ResidenceVerification?
  businessVerification  BusinessVerification?
  propertyVerification  PropertyVerification?
  vehicleVerification   VehicleVerification?
}

// Residence-specific fields
model ResidenceVerification {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId String       @unique
  verification   Verification @relation(fields: [verificationId], references: [id])
  ownerFirstName String?
  ownerLastName  String?
  residentSince  String? // Year like "1989"
  residenceType  String? // "Owned", "Rented", etc.
  structureType  String? // "Apartment", "House", etc.
}

// Business-specific fields
model BusinessVerification {
  id                String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId    String       @unique
  verification      Verification @relation(fields: [verificationId], references: [id])
  businessName      String?
  businessType      String? // "Proprietorship", etc.
  contactDetails    String?
  businessExistence Boolean?
  natureOfBusiness  String? // "Trading", etc.
  salesPerDay       String? // Income range like "5,000-10,000"
}

// Property-specific fields
model PropertyVerification {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId String       @unique
  verification   Verification @relation(fields: [verificationId], references: [id])
  ownerFirstName String?
  ownerLastName  String?
  structureType  String? // "Apartment", etc.
}

// Vehicle-specific fields
model VehicleVerification {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId      String       @unique
  verification        Verification @relation(fields: [verificationId], references: [id])
  engineNumber        String?
  chassisNumber       String?
  registrationNumber  String?
  make                String? // Vehicle make
  model               String? // Vehicle model
  vehicleType         String? // Type of vehicle
  // Document references
  taxInvoiceUrl       String?
  deliveryChalanUrl   String?
  stampedReceiptUrl   String?
  rcUrl               String?
  inspectionReportUrl String?
  vehiclePhotoUrl     String?
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  action     String
  tableName  String
  userId     String
  recordId   String?
  timestamp  DateTime @default(now())
  oldData    Json?
  newData    Json?
  ipAddress  String?
  deviceInfo String?

  user UserProfile @relation(fields: [userId], references: [id])
}
