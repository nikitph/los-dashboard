// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Prisma Schema for Loan Operating System (LOS)

// Enums
enum RoleType {
  CLERK
  INSPECTOR
  LOAN_OFFICER
  CEO
  LOAN_COMMITTEE
  BOARD
  BANK_ADMIN
  SAAS_ADMIN
}

enum LoanType {
  PERSONAL
  VEHICLE
  HOUSE_CONSTRUCTION
  PLOT_PURCHASE
  MORTGAGE
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum VerificationType {
  RESIDENCE
  BUSINESS
  VEHICLE
  PROPERTY
}

enum VerificationStatus {
  PENDING
  COMPLETED
  FAILED
}

// Models

model User {
  id              String           @id @default(dbgenerated()) @map("auth_id") // Reference to Supabase Auth User ID
  email           String?
  firstName       String
  phoneNumber     String           @unique
  lastName        String
  roleAssignments RoleAssignment[]

  isOnboarded Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  AuditLog     AuditLog[]
  Applicant    Applicant[]
  Verification Verification[]
}

model Applicant {
  id                       String            @id @default(dbgenerated())
  userId                   String
  user                     User              @relation(fields: [userId], references: [id])
  loanApplications         LoanApplication[]
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  dateOfBirth              DateTime
  addressState             String
  addressCity              String
  addressFull              String
  addressPinCode           String
  aadharNumber             String
  panNumber                String
  aadharVerificationStatus Boolean           @default(false)
  panVerificationStatus    Boolean           @default(false)
  photoUrl                 String
  incomes                  Income[]
  dependents               Dependent[]
  loanObligations          LoanObligation[]
}

model LoanObligation {
  id          String                 @id @default(dbgenerated())
  applicantId String
  applicant   Applicant              @relation(fields: [applicantId], references: [id])
  cibilScore  Float?
  totalLoan   Float?
  totalEmi    Float?
  loanDetails LoanObligationDetail[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model LoanObligationDetail {
  id               String         @id @default(dbgenerated())
  loanObligationId String
  loanObligation   LoanObligation @relation(fields: [loanObligationId], references: [id])
  outstandingLoan  Float
  emiAmount        Float
  loanDate         DateTime
  loanType         String
  bankName         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Income {
  id            String         @id @default(dbgenerated())
  applicantId   String
  applicant     Applicant      @relation(fields: [applicantId], references: [id])
  type          String
  incomeDetails IncomeDetail[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model IncomeDetail {
  id                 String   @id @default(dbgenerated())
  incomeId           String
  income             Income   @relation(fields: [incomeId], references: [id])
  year               Int
  taxableIncome      Float?
  taxPaid            Float?
  grossIncome        Float?
  rentalIncome       Float?
  incomeFromBusiness Float?
  depreciation       Float?
  grossCashIncome    Float?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Dependent {
  id                        String    @id @default(dbgenerated())
  applicantId               String
  applicant                 Applicant @relation(fields: [applicantId], references: [id])
  averageMonthlyExpenditure Float
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
}

model RoleAssignment {
  id     String   @id @default(dbgenerated())
  userId String
  role   RoleType
  bankId String?

  user User  @relation(fields: [userId], references: [id])
  bank Bank? @relation(fields: [bankId], references: [id])

  assignedAt DateTime @default(now())
}

model Permission {
  id       String   @id @default(dbgenerated())
  action   String
  resource String
  role     RoleType
}

model Bank {
  id               String              @id @default(dbgenerated())
  name             String
  subscription     Subscription?
  roleAssignments  RoleAssignment[]
  loanApplications LoanApplication[]
  configurations   BankConfiguration[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model Subscription {
  id        String    @id @default(dbgenerated())
  bankId    String    @unique
  startDate DateTime
  endDate   DateTime?
  status    String
  amount    Float

  bank Bank @relation(fields: [bankId], references: [id])
}

model BankConfiguration {
  id             String @id @default(dbgenerated())
  bankId         String
  maxLoanAmount  Float
  approvalLimits Json
  interestRates  Json
  loanDurations  Json
  currency       String

  bank Bank @relation(fields: [bankId], references: [id])
}

model LoanApplication {
  id              String         @id @default(dbgenerated())
  applicantId     String
  bankId          String
  loanType        LoanType
  amountRequested Float
  status          LoanStatus
  documents       Document[]
  verifications   Verification[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  applicant Applicant @relation(fields: [applicantId], references: [id])
  bank      Bank      @relation(fields: [bankId], references: [id])
}

model Document {
  id                 String             @id @default(dbgenerated())
  loanApplicationId  String
  documentType       String
  fileUrl            String
  storageType        String
  verificationStatus VerificationStatus @default(PENDING)
  metadata           Json?
  uploadedAt         DateTime           @default(now())

  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
}

model Verification {
  id                String             @id @default(dbgenerated())
  loanApplicationId String
  type              VerificationType
  status            VerificationStatus
  verifiedById      String?
  verifiedAt        DateTime?
  notes             String?
  feedback          String?

  loanApplication LoanApplication @relation(fields: [loanApplicationId], references: [id])
  verifiedBy      User?           @relation(fields: [verifiedById], references: [id])
}

model AuditLog {
  id         String   @id @default(dbgenerated())
  action     String
  userId     String
  targetId   String?
  timestamp  DateTime @default(now())
  metadata   Json?
  ipAddress  String?
  deviceInfo String?

  user User @relation(fields: [userId], references: [id])
}
