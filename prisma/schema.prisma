generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserProfile {
  id               String          @id @map("authId")
  firstName        String?
  lastName         String?
  email            String?         @unique
  phoneNumber      String?         @unique
  isOnboarded      Boolean         @default(false)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  applicants       Applicant[]
  auditLogs        AuditLog[]
  documents        Document[]
  actionsRequested PendingAction[] @relation("RequestedActions")
  actionsReviewed  PendingAction[] @relation("ReviewedActions")
  userRoles        UserRoles[]
  verifications    Verification[]
  timelineEvents   TimelineEvent[]
}

model UserRoles {
  id         String      @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  role       RoleType
  bankId     String?
  assignedAt DateTime    @default(now())
  deletedAt  DateTime?
  bank       Bank?       @relation(fields: [bankId], references: [id])
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role, bankId], name: "unique_role_per_bank")
  @@index([userId])
}

model Applicant {
  id                       String            @id @default(dbgenerated("gen_random_uuid()"))
  userId                   String
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  dateOfBirth              DateTime?
  addressState             String?
  addressCity              String?
  addressFull              String?
  addressPinCode           String?
  aadharNumber             String?
  panNumber                String?
  aadharVerificationStatus Boolean           @default(false)
  panVerificationStatus    Boolean           @default(false)
  photoUrl                 String?
  deletedAt                DateTime?
  bankId                   String
  bank                     Bank              @relation(fields: [bankId], references: [id])
  user                     UserProfile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  dependents               Dependent[]
  documents                Document[]
  incomes                  Income[]
  loanApplications         LoanApplication[]
  loanObligations          LoanObligation[]
  timelineEvents           TimelineEvent[]
}

model LoanObligation {
  id          String                 @id @default(dbgenerated("gen_random_uuid()"))
  applicantId String                 @unique
  cibilScore  Float?
  totalLoan   Float?
  totalEmi    Float?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deletedAt   DateTime?
  documents   Document[]
  applicant   Applicant              @relation(fields: [applicantId], references: [id])
  loanDetails LoanObligationDetail[]
}

model LoanObligationDetail {
  id               String         @id @default(dbgenerated("gen_random_uuid()"))
  loanObligationId String
  outstandingLoan  Float
  emiAmount        Float
  loanDate         DateTime
  loanType         String
  bankName         String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  documents        Document[]
  loanObligation   LoanObligation @relation(fields: [loanObligationId], references: [id])
}

model Income {
  id                        String         @id @default(dbgenerated("gen_random_uuid()"))
  applicantId               String         @unique
  type                      String
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  deletedAt                 DateTime?
  dependents                Int            @default(0)
  averageMonthlyExpenditure Float          @default(0.0)
  averageGrossCashIncome    Float          @default(0.0)
  documents                 Document[]
  applicant                 Applicant      @relation(fields: [applicantId], references: [id])
  incomeDetails             IncomeDetail[]
}

model IncomeDetail {
  id                 String     @id @default(dbgenerated("gen_random_uuid()"))
  incomeId           String
  year               Int
  taxableIncome      Float?
  taxPaid            Float?
  grossIncome        Float?
  rentalIncome       Float?
  incomeFromBusiness Float?
  depreciation       Float?
  grossCashIncome    Float?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  deletedAt          DateTime?
  documents          Document[]
  income             Income     @relation(fields: [incomeId], references: [id])
}

model Dependent {
  id                        String     @id @default(dbgenerated("gen_random_uuid()"))
  applicantId               String
  averageMonthlyExpenditure Float
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
  deletedAt                 DateTime?
  applicant                 Applicant  @relation(fields: [applicantId], references: [id])
  documents                 Document[]
}

model Bank {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  deletedAt          DateTime?
  addressLine        String?
  city               String?
  contactNumber      String?
  gstNumber          String?
  legalEntityName    String?
  officialEmail      String               @unique
  panNumber          String?
  regulatoryLicenses Json?
  state              String?
  zipCode            String?
  onboardingStatus   BankOnboardingStatus @default(BANK_CREATED)
  applicants         Applicant[]
  configurations     BankConfiguration[]
  documents          Document[]
  loanApplications   LoanApplication[]
  pendingAction      PendingAction[]
  subscription       Subscription?
  UserRoles          UserRoles[]
}

model Subscription {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  bankId    String   @unique
  startDate DateTime

  endDate       DateTime?
  status        String
  amount        Float
  deletedAt     DateTime?
  billingCycle  BillingCycle
  paymentMethod Json?
  planType      PlanType
  documents     Document[]
  bank          Bank         @relation(fields: [bankId], references: [id])
}

model BankConfiguration {
  id             String     @id @default(dbgenerated("gen_random_uuid()"))
  bankId         String
  maxLoanAmount  Float
  approvalLimits Json
  interestRates  Json
  loanDurations  Json
  currency       String
  deletedAt      DateTime?
  bank           Bank       @relation(fields: [bankId], references: [id])
  documents      Document[]
}

model LoanApplication {
  id              String          @id @default(dbgenerated("gen_random_uuid()"))
  applicantId     String
  bankId          String
  loanType        LoanType
  amountRequested Float
  selectedTenure  Int?
  proposedAmount  Float?
  calculatedEMI   Float?
  status          LoanStatus
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  coApplicants    CoApplicant[]
  documents       Document[]
  guarantors      Guarantor[]
  applicant       Applicant       @relation(fields: [applicantId], references: [id])
  bank            Bank            @relation(fields: [bankId], references: [id])
  verifications   Verification[]
  timelineEvents  TimelineEvent[]
}

model Guarantor {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId String
  firstName         String
  lastName          String
  email             String
  addressState      String
  addressCity       String
  addressZipCode    String
  addressLine1      String
  addressLine2      String?
  mobileNumber      String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  documents         Document[]
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id])
}

model CoApplicant {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId String
  firstName         String
  lastName          String
  email             String
  addressState      String
  addressCity       String
  addressZipCode    String
  addressLine1      String
  addressLine2      String?
  mobileNumber      String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
  loanApplication   LoanApplication @relation(fields: [loanApplicationId], references: [id])
  documents         Document[]
}

model Document {
  id                     String             @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId      String?
  fileUrl                String
  storageType            String
  metadata               Json?
  uploadedAt             DateTime           @default(now())
  deletedAt              DateTime?
  applicantId            String?
  bankConfigurationId    String?
  bankId                 String?
  coApplicantId          String?
  dependentId            String?
  fileName               String
  fileSize               Int
  guarantorId            String?
  incomeDetailId         String?
  incomeId               String?
  loanObligationDetailId String?
  loanObligationId       String?
  mimeType               String
  status                 VerificationStatus @default(PENDING)
  subscriptionId         String?
  uploadedById           String
  verificationId         String?
  documentType           DocumentType
  userProfileId          String?

  // Relations
  applicant            Applicant?            @relation(fields: [applicantId], references: [id])
  bankConfiguration    BankConfiguration?    @relation(fields: [bankConfigurationId], references: [id])
  bank                 Bank?                 @relation(fields: [bankId], references: [id])
  coApplicant          CoApplicant?          @relation(fields: [coApplicantId], references: [id])
  dependent            Dependent?            @relation(fields: [dependentId], references: [id])
  guarantor            Guarantor?            @relation(fields: [guarantorId], references: [id])
  incomeDetail         IncomeDetail?         @relation(fields: [incomeDetailId], references: [id])
  income               Income?               @relation(fields: [incomeId], references: [id])
  loanApplication      LoanApplication?      @relation(fields: [loanApplicationId], references: [id])
  loanObligationDetail LoanObligationDetail? @relation(fields: [loanObligationDetailId], references: [id])
  loanObligation       LoanObligation?       @relation(fields: [loanObligationId], references: [id])
  subscription         Subscription?         @relation(fields: [subscriptionId], references: [id])
  userProfile          UserProfile?          @relation(fields: [userProfileId], references: [id])
  verification         Verification?         @relation(fields: [verificationId], references: [id])
  timelineEvents       TimelineEvent[]
}

model Verification {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()"))
  loanApplicationId     String
  type                  VerificationType
  status                VerificationStatus
  verifiedById          String?
  verifiedAt            DateTime?
  deletedAt             DateTime?
  addressCity           String?
  addressLine1          String?
  addressLine2          String?
  addressState          String?
  addressZipCode        String?
  createdAt             DateTime               @default(now())
  locationFromMain      String?
  photographUrl         String?
  remarks               String?
  result                Boolean
  updatedAt             DateTime               @updatedAt
  verificationDate      DateTime               @default(now())
  verificationTime      String
  businessVerification  BusinessVerification?
  documents             Document[]
  propertyVerification  PropertyVerification?
  residenceVerification ResidenceVerification?
  vehicleVerification   VehicleVerification?
  loanApplication       LoanApplication        @relation(fields: [loanApplicationId], references: [id])
  verifiedBy            UserProfile?           @relation(fields: [verifiedById], references: [id])
}

model ResidenceVerification {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId String       @unique
  ownerFirstName String?
  ownerLastName  String?
  residentSince  String?
  residenceType  String?
  structureType  String?
  verification   Verification @relation(fields: [verificationId], references: [id])
}

model BusinessVerification {
  id                String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId    String       @unique
  businessName      String?
  businessType      String?
  contactDetails    String?
  businessExistence Boolean?
  natureOfBusiness  String?
  salesPerDay       String?
  verification      Verification @relation(fields: [verificationId], references: [id])
}

model PropertyVerification {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId String       @unique
  ownerFirstName String?
  ownerLastName  String?
  structureType  String?
  verification   Verification @relation(fields: [verificationId], references: [id])
}

model VehicleVerification {
  id                  String       @id @default(dbgenerated("gen_random_uuid()"))
  verificationId      String       @unique
  engineNumber        String?
  chassisNumber       String?
  registrationNumber  String?
  make                String?
  model               String?
  vehicleType         String?
  taxInvoiceUrl       String?
  deliveryChalanUrl   String?
  stampedReceiptUrl   String?
  rcUrl               String?
  inspectionReportUrl String?
  vehiclePhotoUrl     String?
  verification        Verification @relation(fields: [verificationId], references: [id])
}

model PendingAction {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  bankId         String?
  actionType     PendingActionType
  payload        Json
  status         ApprovalStatus    @default(PENDING)
  requestedById  String
  requestedAt    DateTime          @default(now())
  reviewedById   String?
  reviewedAt     DateTime?
  reviewRemarks  String?
  targetModel    String?
  targetRecordId String?

  // Date fields
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  bank        Bank?        @relation(fields: [bankId], references: [id])
  requestedBy UserProfile  @relation("RequestedActions", fields: [requestedById], references: [id])
  reviewedBy  UserProfile? @relation("ReviewedActions", fields: [reviewedById], references: [id])

  @@index([status, bankId])
  @@index([requestedById])
  @@index([reviewedById])
}

model TimelineEvent {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  timelineEntityType TimelineEntityType
  timelinEntityId    String
  timelineEventType  TimelineEventType
  actionData         Json?
  remarks            String?
  createdAt          DateTime           @default(now())

  // Relationships
  userId String
  user   UserProfile @relation(fields: [userId], references: [id])

  loanApplicationId String?
  loanApplication   LoanApplication? @relation(fields: [loanApplicationId], references: [id])

  applicantId String?
  applicant   Applicant? @relation(fields: [applicantId], references: [id])

  documentId String?
  document   Document? @relation(fields: [documentId], references: [id])

  // Indexes for common queries
  @@index([timelineEntityType, timelinEntityId])
  @@index([timelineEventType])
  @@index([createdAt])
}

model AuditLog {
  id         String      @id @default(dbgenerated("gen_random_uuid()"))
  action     String
  tableName  String
  userId     String
  recordId   String?
  timestamp  DateTime    @default(now())
  oldData    Json?
  newData    Json?
  ipAddress  String?
  deviceInfo String?
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TimelineEntityType {
  APPLICANT
  LOAN_APPLICATION
  DOCUMENT
}

enum TimelineEventType {
  // Application lifecycle
  APPLICATION_CREATED
  APPLICATION_UPDATED
  APPLICATION_DELETED
  APPLICATION_REOPENED
  STATUS_CHANGE

  // Documents
  DOCUMENT_UPLOADED
  DOCUMENT_REVIEWED
  DOCUMENT_DELETED
  DOCUMENT_REQUESTED

  // User actions
  USER_CREATED
  USER_ASSIGNED_ROLE
  USER_REMOVED_ROLE

  // Verifications
  VERIFICATION_STARTED
  VERIFICATION_COMPLETED
  VERIFICATION_FAILED
  VERIFICATION_REMARK_ADDED

  // Approval flow
  ACTION_REQUESTED
  ACTION_APPROVED
  ACTION_REJECTED
  ACTION_CANCELLED
  ACTION_REVIEWED

  // Notes and remarks
  NOTE_ADDED
  REMARK_ADDED

  // System events
  SYSTEM_EVENT
  AUTO_VERIFICATION
  SCHEDULED_TASK_COMPLETED

  // security actions
  ACCESS_GRANTED
  ACCESS_REVOKED
}

enum RoleType {
  CLERK
  INSPECTOR
  LOAN_OFFICER
  CEO
  LOAN_COMMITTEE
  BOARD
  BANK_ADMIN
  SAAS_ADMIN
  APPLICANT
  USER
}

enum BankOnboardingStatus {
  BANK_CREATED
  BANK_ONBOARDED
  ADMIN_CREATED
  SUBSCRIPTION_CREATED
  USERS_CREATED
  CONFIGURATIONS_CREATED
  BANK_DETAILS_ADDED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LoanType {
  PERSONAL
  VEHICLE
  HOUSE_CONSTRUCTION
  PLOT_AND_HOUSE_CONSTRUCTION
  PLOT_PURCHASE
  MORTGAGE
}

enum LoanStatus {
  DRAFT
  PENDING_INSPECTOR_ASSIGNMENT
  PENDING_LOAN_OFFICER_ASSIGNMENT
  PENDING_LOAN_OFFICER_REVIEW
  PENDING_VERIFICATION
  VERIFICATION_IN_PROGRESS
  VERIFICATION_COMPLETED
  VERIFICATION_FAILED
  PENDING
  APPROVED
  REJECTED
  REJECTED_BY_APPLICANT
  UNDER_REVIEW
}

enum PendingActionType {
  REQUEST_BANK_USER_CREATION
}

enum VerificationType {
  RESIDENCE
  BUSINESS
  VEHICLE
  PROPERTY
}

enum VerificationStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DocumentType {
  AADHAAR_CARD
  PAN_CARD
  IDENTITY_PROOF
  ADDRESS_PROOF
  INCOME_PROOF
  BANK_STATEMENT
  PROPERTY_DOCUMENT
  VEHICLE_DOCUMENT
  LOAN_AGREEMENT
  VERIFICATION_PHOTO
  KYC_DOCUMENT
  APPLICATION_FORM
  APPLICANT_PHOTO
  OTHER
}

enum PlanType {
  BASIC
  STANDARD
  PREMIUM
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}
